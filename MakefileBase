### Target Files ###
# TARGET_EXE = myexe
# TARGET_LIB = libmylib.a


### Language Specific ###
# source files extension and corresponding compiler
SRC_EXT = c
CC = gcc

# preprocessor, compiler, and linker flags
PPFLAGS = -I$(INC_DIR) -I$(LIB_INC)
CFLAGS = $(PPFLAGS) -g -std=c99 -pedantic -Wall -Wextra \
          -Waggregate-return -Wcast-align -Wfloat-equal -Wformat=2 \
          -Wpointer-arith -Wstrict-overflow=2 -Wstrict-prototypes -Wshadow -Wwrite-strings \
          -Wcast-qual -Wmissing-prototypes -Wswitch-enum -Wswitch-default -Wunreachable-code \
          # -Werror # -Wconversion
# other useful flags: -save-temps -masm=intel -m64 -march=native -Og -O -Os -Ofast 
LFLAGS = -L$(LIB_DIR) -lpcg_random -lm


### Folder Structure ###
# SRC_DIR - implementation files 
# INC_DIR - header files 
# OBJ_DIR - object files 
# DEP_DIR - dependency files 
# LIB_DIR - external library binaries 
# LIB_INC - external library headers 
# TST_DIR - test source files
# TST_BLD - test build files

SRC_DIR = src
INC_DIR = include
OBJ_DIR = build
DEP_DIR = $(OBJ_DIR)
LIB_DIR = lib
LIB_INC = $(LIB_DIR)/include
TST_DIR = tests
TST_BLD = $(TST_DIR)/build

# source, object, dependency, and cleaned files
SRC = $(wildcard $(SRC_DIR)/*.$(SRC_EXT))
OBJ = $(SRC:$(SRC_DIR)/%.$(SRC_EXT)=$(OBJ_DIR)/%.o)
DEP = $(OBJ:$(OBJ_DIR)/%.o=$(DEP_DIR)/%.d)
CLN = $(TARGET_EXE) $(TARGET_LIB) $(OBJ_DIR) $(DEP_DIR)

# test executable, source, object, dependency and cleaned files, and linker flags
TST_EXE = test_all
TST_SRC = $(wildcard $(TST_DIR)/*.$(SRC_EXT))
TST_OBJ = $(TST_SRC:$(TST_DIR)/%.$(SRC_EXT)=$(TST_BLD)/%.o)
TST_DEP = $(TST_OBJ:%.o=%.d)
TST_CLN = $(TST_EXE) $(TST_BLD)
TST_LFLAGS = -L. -lclab $(LFLAGS)


### Default Targets
all: main library tests
	@echo all targets built


### External Libraries ###
$(EXT)_H = $(LIB_INC)/$(EXT)
$(EXT)_A = $(LIB_DIR)/lib$(EXT).a
$(EXT)_H_SRC = $(EXT_DIR)/include
$(EXT)_A_SRC = $(EXT_DIR)/src/lib$(EXT).a
LIB_LNS = $($(EXT)_H) $($(EXT)_A)


### Symbolic Links ###
symlinks: $(LIB_LNS)

# create symlinks to external library
$($(EXT)_H): $($(EXT)_H_SRC)
	ln -sf $(CURDIR)/$< $(CURDIR)/$@

$($(EXT)_A): $($(EXT)_A_SRC)
	ln -sf $(CURDIR)/$< $(CURDIR)/$@


### Main Program ###
main: $(TARGET_EXE)

# link the final executable
$(TARGET_EXE): $(OBJ)
	@echo linking: $@
	@$(CC) $^ $(LFLAGS) -o $@
	@echo successfully built: $@

# compile object files, and generate dependency files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.$(SRC_EXT) $(LIB_LNS)
	@mkdir -p $(OBJ_DIR)
	@mkdir -p $(DEP_DIR)
	@echo compiling: $< '->' $@
	@$(CC) $(CFLAGS) -c $< -o $@
	@$(CC) $(CFLAGS) -MM $< > $(DEP_DIR)/$*.d

# include dependency files
-include $(DEP)


### Run Executable ###
run: exe
	./$(TARGET_EXE)


### Library ###
library: $(TARGET_LIB)

# creates static library from project's object files
$(TARGET_LIB): $(OBJ)
	@echo archiving: $(TARGET_LIB)
	@ar -cr $(TARGET_LIB) $^
	@echo successfully built: $@


### Tests ###
tests: $(TST_EXE)

# link the final executable
$(TST_EXE): $(TST_OBJ) $(TARGET_LIB)
	@echo linking: $@
	@$(CC) $^ $(TST_LFLAGS) -o $@
	@echo successfully built: $@

# compile object files, and generate dependency files
$(TST_BLD)/%.o: $(TST_DIR)/%.$(SRC_EXT) $(LIB_LNS)
	@mkdir -p $(TST_BLD)
	@echo compiling: $< '->' $@
	@$(CC) $(CFLAGS) -c $< -o $@
	@$(CC) $(CFLAGS) -MM $< > $(TST_BLD)/$*.d

# include dependency relations
-include $(TST_DEP)


### Clean Build Files and Symbolic Links ###
clean-all: clean clean-symlinks

### Clean Binaries and Objects ###
clean:
	@$(RM) -r $(CLN) $(TST_CLN)
	@echo cleaning: $(CLN) $(TST_CLN)

### Clean Symbolic Links ###
clean-symlinks:
	@$(RM) -r $(LIB_LNS)
	@echo cleaning: $(LIB_LNS)

### Phony Targets ###
.PHONY: all main symlinks library tests clean run symlink
